<!DOCTYPE html>
<!--suppress JSUnresolvedReference -->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}My Jinja App{% endblock %}</title>

    <!-- Bootstrap CSS via CDN -->
    <link
            href=https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css
            rel="stylesheet"
    >
    <link href="{{ url_for('static', path='/bootstrap.css') }}" rel="stylesheet">
    <!-- Option 1: Include in HTML -->
    <link rel="stylesheet" href=https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css>
    <script defer src="https://umami.sturgeon.me/script.js" data-website-id="{{ config.UMAMI_KEY }}"></script>
</head>
<body>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="{{ url_for('root') }}">AutoPlex</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('duplicates') }}">DeDupe Tool</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('preferences') }}">Preferences</a>
                </li>
                <li class="nav-item"><a class="nav-link" href="#">About</a></li>
                <li class="nav-item"><a class="nav-link" href="#">Contact</a></li>
            </ul>
            <!-- Right justified Login link -->
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link"
                       data-bs-toggle="collapse"
                       data-bs-target="#ticker-banner"
                       aria-expanded="true"
                       aria-controls="ticker-banner"
                       href="#">
                        Sync Status
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% set sync_date = plex_user.server_sync_date %}
{% if not sync_date %}
    {% set should_show = " show" %}
    {% set background_color = "#ffdddd" %}
{% else %}
    {% set should_show = "" %}
    {% set background_color = "#fff8dc" %}
{% endif %}
<div class="collapse{{ should_show }}" id="ticker-banner">
    <div class="container-fluid" style="background-color: {{ background_color }};">
        <div class="d-flex justify-content-between align-items-center py-2 px-3">
            <div>
                <span class="fw-bold">Last Synced:</span>
                <span id="sync-status-text">
                </span>
            </div>            <!-- Changed element from <button> to <a> for navigation -->
            <a href="{{ url_for('sync') }}" id="sync-now-btn" class="btn btn-warning">Sync Now</a>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="container mt-4">
    {% block content %}
        <p>Welcome to the Jinja template with Bootstrap!</p>
    {% endblock %}
</div>

<!-- Bootstrap JS via CDN -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
</script>

<script>
    let slowPollingInterval = 60000; // 1 minute
    let fastPollingInterval = 250;   // 250 ms
    let pollingIntervalId;
    let isFastPolling = false;

    // Function to start polling with a given interval.
    function startPolling(interval) {
        if (pollingIntervalId) {
            clearInterval(pollingIntervalId);
        }
        pollingIntervalId = setInterval(updateSyncStatus, interval);
    }

    document.addEventListener("DOMContentLoaded", function () {
        let syncButton = document.getElementById("sync-now-btn");
        syncButton.addEventListener("click", function (e) {
            e.preventDefault();
            if (!isFastPolling) {
                console.log("Setting poling interval to fast")
                isFastPolling = true;
                startPolling(fastPollingInterval);
            }
            fetch("{{ url_for('sync') }}", {method: "GET"})
                .then(response => response.json())
                .then(data => {
                    console.log("Sync complete", data);
                    // Optionally, update the UI to reflect the sync result
                })
                .catch(error => {
                    console.error("Error during sync", error);
                });
        });
        updateSyncStatus()
    });

    function updateSyncStatus() {
        console.log("Updating sync status")
        fetch("{{ url_for('sync_status') }}", {method: "GET"})
            .then(response => response.json())
            .then(data => {
                let syncStatusText = document.getElementById("sync-status-text");
                // If the sync job is running, update the text to 'Running'
                if (data.sync_status === "Sync Completed") {
                    syncStatusText.textContent = data.last_synced;
                    if (isFastPolling) {
                        console.log("Switching to slow poling")
                        isFastPolling = false;
                        startPolling(slowPollingInterval);
                    }
                } else {
                    // Otherwise, update with the last sync time provided by the backend
                    syncStatusText.textContent = data.sync_status;
                }
            })
            .catch(error => {
                console.error("Error fetching sync status", error);
            });
    }
</script>
</body>
</html>